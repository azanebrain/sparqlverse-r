library(ggplot2)
library(igraph)
library(shiny)
library(SPARQL)

endpoint <- "http://ws-akeen:8080"
whereclause <- "<person2> ?p ?o"
whereclauses <- c(whereclause)
defaultLimit <- 10

# Define server logic
shinyServer(function(input, output, session) {

  bootstrap <- function(){
   updateSelectInput(session, "whereclause", label="Select a WHERE clause:", choices = whereclauses, selected = whereclause)
   # updateSliderInput(session, "limit", value = defaultLimit)
  }
  isolate(bootstrap())
  
  queryTemplate <-
    "SELECT ?p ?o
    FROM <tickit>
    WHERE { ?:whereclause }
    ORDER BY desc(?p) ?o
    LIMIT ?:limit"

  #Set the query results to a variable and replace the LIMIT value with the slider input
  query <-reactive({ 
                    temp <- 
                            gsub("\\?:whereclause", input$whereclause[1], queryTemplate) 
                            gsub("\\?:limit", input$limit[1], temp) 
                   })
  results <-reactive({SPARQL(endpoint, query())$results})
  ego <-reactive({graph.data.frame(results(), directed=F)})

  output$egoPlot <- renderPlot({
    plot(ego())
  }, width = "auto", height = 400)
  
  output$resultsTable <- renderDataTable({
    results()
  })
  
  output$SPARQLquery <- renderText({
    query()
  })

})
